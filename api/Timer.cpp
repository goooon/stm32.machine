#include "Timer.h"
extern "C" unsigned int GetSysTickCounter();
namespace api
{
		void TIM2_IRQHandler(void)
		{
			u8 ReadValue;
			//????????????
			if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
			{
				TIM_ClearITPendingBit(TIM2, TIM_FLAG_Update);
				int i = 0;
				//LOG_I("timer irq");
			}
		}
		void RCC_cfg()
		{
			//????????
			ErrorStatus HSEStartUpStatus;
			//?RCC???????????
			RCC_DeInit();
			//??????????
			RCC_HSEConfig(RCC_HSE_ON);
			//????????????
			HSEStartUpStatus = RCC_WaitForHSEStartUp();
			if (HSEStartUpStatus == SUCCESS)
			{
				//??AHB??(HCLK)?????
				RCC_HCLKConfig(RCC_SYSCLK_Div1);
				//????AHB??(APB2)?HCLK??
				RCC_PCLK2Config(RCC_HCLK_Div1);
				//????AHB??(APB1)?HCLK?2??
				RCC_PCLK1Config(RCC_HCLK_Div2);
				//??FLASH????
				FLASH_SetLatency(FLASH_Latency_2);
				//???????
				FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
				//??PLL??,?HSE?9?? 8MHz * 9 = 72MHz
				RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
				//??PLL
				RCC_PLLCmd(ENABLE);
				//??PLL????
				while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
				//??PLL??????
				RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
				//??PLL???????
				while (RCC_GetSYSCLKSource() != 0x08);
			}
			//??TIM2???
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
			//??GPIO???
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
		}
		void TIMER_cfg()
		{
			TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
			//???Timer??????
			TIM_DeInit(TIM2);
			//???????TIM2?????
			TIM_InternalClockConfig(TIM2);
			//??????36000-1,????????72MHz/36000 = 2kHz
			TIM_TimeBaseStructure.TIM_Prescaler = 36000 - 1;
			//??????
			TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
			//??????????????
			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
			//????????,??2000???????????
			TIM_TimeBaseStructure.TIM_Period = 2000 - 1;
			//??????TIM2?
			TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
			//????????
			TIM_ClearFlag(TIM2, TIM_FLAG_Update);
			//??ARR??????
			TIM_ARRPreloadConfig(TIM2, DISABLE);
			//??TIM2???
			TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
		}
		void NVIC_cfg()
		{
			NVIC_InitTypeDef NVIC_InitStructure;
			//??????1
			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
			//??TIM2?????
			NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
			//???????????0
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
			//???????????0
			NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
			//????
			NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
			NVIC_Init(&NVIC_InitStructure);
		}

		unsigned int GetSystemTicks() {
			return GetSysTickCounter();
		}
}